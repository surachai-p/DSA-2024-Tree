## คำถามท้ายการทดลอง
#1. เพราะเหตุใด Binary Search Tree จึงมีประสิทธิภาพในการค้นหาข้อมูลมากกว่า Linear Search?
การตัดสินใจที่รวดเร็ว: ในแต่ละขั้นตอนของการค้นหา เราจะตัดสินใจได้ทันทีว่าจะไปค้นหาต่อในส่วนใดของต้นไม้ ทำให้ลดจำนวนการเปรียบเทียบลงอย่างมาก
ความซับซ้อนของเวลา: ในกรณีที่ดีที่สุด (เมื่อต้นไม้สมดุล) ความซับซ้อนของเวลาในการค้นหาของ BST คือ O(log n) ซึ่งหมายความว่ายิ่งข้อมูลมีมากขึ้น
เวลาในการค้นหาจะเพิ่มขึ้นช้ามาก เมื่อเทียบกับ Linear Search ที่มีความซับซ้อนของเวลาเป็น O(n) ซึ่งหมายความว่าเวลาในการค้นหาจะเพิ่มขึ้นตามสัดส่วนกับจำนวนข้อมูล
โครงสร้างข้อมูลที่เหมาะสม: BST เหมาะสำหรับการค้นหาข้อมูลที่เรียงลำดับแล้ว ทำให้สามารถนำไปประยุกต์ใช้ในงานต่างๆ ได้มากมาย 
เช่น การจัดเรียงข้อมูล การสร้าง Dictionary และการสร้าง Expression Tree
#2. ในกรณีใดบ้างที่ BST จะมีประสิทธิภาพในการค้นหาเทียบเท่ากับ Linear Search?
เนื่องจากหลักการแบ่งข้อมูลออกเป็นส่วนๆ และค้นหาเฉพาะในส่วนที่เกี่ยวข้อง ทำให้ลดจำนวนการเปรียบเทียบได้มาก
เพื่อให้ BST ทำงานได้อย่างมีประสิทธิภาพ ควรหลีกเลี่ยงการสร้างต้นไม้ที่เสื่อมหรือไม่สมดุล 
สามารถทำได้โดยการใช้เทคนิคในการรักษาความสมดุลของต้นไม้ เช่น AVL Tree หรือ Red-Black Tree
#3. จงอธิบายความแตกต่างระหว่าง Binary Tree และ Binary Search 
Binary Tree (ต้นไม้ทวิภาค)
นิยาม: คือโครงสร้างข้อมูลแบบต้นไม้ชนิดหนึ่งที่โหนดใดๆ จะมีลูกได้ไม่เกินสองโหนด โดยลูกซ้ายและลูกขวาจะไม่มีการเรียงลำดับเฉพาะเจาะจง
ลักษณะ:
โหนดราก (Root): โหนดที่อยู่ชั้นบนสุด
โหนดลูก (Child): โหนดที่เชื่อมต่อกับโหนดอื่นโดยตรง
โหนดพ่อ (Parent): โหนดที่เชื่อมต่อกับโหนดอื่นโดยตรงในระดับที่สูงกว่า
โหนดใบ (Leaf): โหนดที่ไม่มีลูก
ความสูงของต้นไม้ (Height): จำนวนระดับของต้นไม้ที่มากที่สุด
Binary Search Tree (BST) (ต้นไม้ค้นหาทวิภาค)
นิยาม: เป็นชนิดพิเศษของ Binary Tree ที่มีเงื่อนไขเพิ่มเติม คือ ค่าของโหนดลูกซ้ายจะต้องน้อยกว่าค่าของโหนดพ่อ และค่าของโหนดลูกขวาจะต้องมากกว่าค่าของโหนดพ่อ
ลักษณะ:
มีการเรียงลำดับของข้อมูล
การค้นหาข้อมูลทำได้อย่างมีประสิทธิภาพโดยการเปรียบเทียบค่า
#4. การ Traversal แบบใดที่จะแสดงผลข้อมูลเรียงลำดับจากน้อยไปมากเมื่อใช้กับ BST?
หลักการของ Inorder: การ traversal แบบ Inorder จะทำการเยี่ยมชมโหนดในลำดับต่อไปนี้:
เยี่ยมชม subtree ซ้ายก่อน
เยี่ยมชม root node
เยี่ยมชม subtree ขวา
คุณสมบัติของ BST:
ค่าของโหนดใน subtree ซ้ายจะน้อยกว่าค่าของ root node
ค่าของ root node จะน้อยกว่าค่าของโหนดใน subtree ขวา
การเชื่อมโยง: เนื่องจากคุณสมบัติของ BST ทำให้เมื่อเราทำ Inorder traversal จะได้ค่าของโหนดเรียงลำดับจากน้อยไปมากตามธรรมชาติ

